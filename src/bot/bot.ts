import { Telegraf, type Context } from "telegraf";
import { AppDataSource } from "../config/database";
import { User } from "../entities/User";
import { Feedback, FeedbackAction } from "../entities/Feedback";
import { WorkerHours } from "../entities/WorkerHours";
import { ILike } from "typeorm";
import { WorkerService } from "../services/WorkerService";

const BOT_TOKEN = process.env.BOT_TOKEN || "REPLACE_WITH_YOUR_TOKEN";
export const bot = new Telegraf(BOT_TOKEN);

function normalizeDate(d: Date) {
  const x = new Date(d);
  x.setHours(0, 0, 0, 0);
  return x;
}

// Helper function to safely answer callback queries
async function safeAnswerCbQuery(ctx: Context, text?: string, options?: any) {
  try {
    await ctx.answerCbQuery(text, options);
  } catch (error) {
    console.log("Callback query too old or invalid:", (error as any).message);
  }
}

// Helper function to safely send messages
async function safeSendMessage(ctx: Context, text: string, options?: any) {
  try {
    return await ctx.reply(text, options);
  } catch (error) {
    const err = error as any;
    if (err.response?.error_code === 403) {
      console.log(`Bot blocked by user ${ctx.from?.id}: ${err.message}`);
    } else {
      console.error("Error sending message:", err.message);
    }
    return null;
  }
}

// Enhanced user search function
async function enhancedUserSearch(userRepo: any, searchText: string) {
  const text = searchText.trim().toLowerCase();
  if (!text) return [];

  // Minimum search length validation
  if (text.length < 2) return [];

  // Split search text into words for flexible matching
  const searchWords = text.split(/\s+/).filter((word) => word.length > 1);

  if (searchWords.length === 0) return [];

  // Case 1: Single word search - match against name OR position
  if (searchWords.length === 1) {
    const singleWord = searchWords[0];
    return await userRepo.find({
      where: [
        { name: ILike(`%${singleWord}%`) },
        { position: ILike(`%${singleWord}%`) },
      ],
      order: { name: "ASC" },
      take: 50, // Limit to prevent performance issues
    });
  }

  // Case 2: Multiple words - try to match all words in name
  // This handles cases like "John Doe" or "Doe John"
  const allUsers = await userRepo.find({
    order: { name: "ASC" },
    take: 1000, // Get more users for client-side filtering
  });

  // Filter users where ALL search words appear in name (in any order)
  const matchingUsers = allUsers.filter((user: any) => {
    const userName = user.name.toLowerCase();
    const userPosition = (user.position || "").toLowerCase();
    const userFullText = `${userName} ${userPosition}`;

    return searchWords.every((word) => userFullText.includes(word));
  });

  // Sort by relevance - exact name matches first, then partial matches
  return matchingUsers.sort((a: any, b: any) => {
    const aName = a.name.toLowerCase();
    const bName = b.name.toLowerCase();

    // Prioritize names that start with the search terms
    const aStartsWithFirst = aName.startsWith(searchWords[0]);
    const bStartsWithFirst = bName.startsWith(searchWords[0]);

    if (aStartsWithFirst && !bStartsWithFirst) return -1;
    if (!aStartsWithFirst && bStartsWithFirst) return 1;

    // Then sort alphabetically
    return aName.localeCompare(bName);
  });
}

// Helper function to show both inline and keyboard menus
async function showMenus(ctx: Context) {
  // Show inline keyboard menu
  await ctx.reply("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π", callback_data: "action_last5days" }],
        [{ text: "üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data: "action_week" }],
        [{ text: "üìÜ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data: "action_month" }],
        [{ text: "üóì –ò—Å—Ç–æ—Ä–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data: "action_history" }],
        [{ text: "üí¨ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data: "action_feedback" }],
      ],
    },
  });

  // Show persistent keyboard menu
  await ctx.reply("–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:", {
    reply_markup: {
      keyboard: [
        [{ text: "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π" }, { text: "üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è" }],
        [{ text: "üìÜ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü" }, { text: "üóì –ò—Å—Ç–æ—Ä–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º" }],
        [{ text: "üí¨ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ" }],
      ],
      resize_keyboard: true,
    },
  });
}

const userSessions = new Map<
  string,
  {
    awaitingFeedback?: boolean;
    feedbackType?: "general" | "hours_mistake";
    selectedDate?: Date;
    awaitingHoursInput?: { workerHoursId: number };
  }
>();

export async function botSetup() {
  const userRepo = AppDataSource.getRepository(User);
  const feedbackRepo = AppDataSource.getRepository(Feedback);
  const workerHoursRepo = AppDataSource.getRepository(WorkerHours);
  const workerService = new WorkerService();

  // Global error handler for the bot
  bot.catch((err, ctx) => {
    console.error("Unhandled bot error:", err);
    console.error(
      "Update that caused the error:",
      JSON.stringify(ctx.update, null, 2)
    );
  });

  // /start ‚Äî link instructions
  bot.start(async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    // Check if user is already linked
    const user = await userRepo.findOne({ where: { telegramId } });
    if (user) {
      // User is already linked, show menu
      await safeSendMessage(
        ctx,
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}! –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ.`
      );

      await showMenus(ctx);
    } else {
      // User is not linked, show link instructions
      await safeSendMessage(
        ctx,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ:\n\nüîó **–°–ø–æ—Å–æ–± 1:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å ID\n`/link 1005767`\n\nüîç **–°–ø–æ—Å–æ–± 2:** –ù–∞–π–¥–∏—Ç–µ —Å–µ–±—è –ø–æ –∏–º–µ–Ω–∏\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é\n–ü—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤` –∏–ª–∏ `–ü–µ—Ç—Ä–æ–≤`\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/search` –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ –ø–æ–∏—Å–∫—É"
      );
    }
  });

  bot.command("tgid", async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;
    await safeSendMessage(ctx, `${telegramId}`);
  });

  // /link <id> ‚Äî link user
  bot.command("link", async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    const args = (ctx.message as any)["text"].split(" ");
    if (!args || args.length < 2) {
      await safeSendMessage(
        ctx,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID: /link [–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô_ID]"
      );
      return;
    }

    const personalId = Number.parseInt(args[1], 10);
    if (isNaN(personalId)) {
      await safeSendMessage(
        ctx,
        "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
      );
      return;
    }

    try {
      // Check if this telegramId is already connected to another user
      const existingUser = await userRepo.findOne({ where: { telegramId } });
      if (existingUser && existingUser.id !== personalId) {
        await safeSendMessage(
          ctx,
          `–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${existingUser.name}. –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –æ—Ç–≤—è–∑–∫—É",
                    callback_data: `logout_request_${existingUser.id}`,
                  },
                ],
              ],
            },
          }
        );
        return;
      }

      const user = await userRepo.findOne({ where: { id: personalId } });
      if (!user) {
        await safeSendMessage(
          ctx,
          "–î–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID."
        );
        return;
      }

      // Check if the user is already linked to another Telegram account
      if (user.isLinked && user.telegramId && user.telegramId !== telegramId) {
        await safeSendMessage(
          ctx,
          "–î–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É."
        );
        return;
      } else {
        user.telegramId = telegramId;
        user.isLinked = true;
        await userRepo.save(user);
        await safeSendMessage(
          ctx,
          `üëã –ü—Ä–∏–≤–µ—Ç ${user.name}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`
        );
      }

      // optional: send today's by default
      await workerService.sendByUserId(user.id);

      await showMenus(ctx);
    } catch (error) {
      console.error("Link error:", error);
      await safeSendMessage(
        ctx,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
    }
  });

  // Text search for user linking via name and menu button handlers
  bot.on("message", async (ctx: Context) => {
    if (!ctx.message || !("text" in ctx.message)) return;
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    const text = ctx.message.text;

    console.log("text:", text);

    const session = userSessions.get(telegramId);
    if (session?.awaitingHoursInput) {
      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        userSessions.delete(telegramId);
        await safeSendMessage(
          ctx,
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      const hours = parseFloat(text.replace(",", "."));
      if (Number.isNaN(hours)) {
        await safeSendMessage(ctx, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.");
        return;
      }

      const workerHours = await workerHoursRepo.findOne({
        where: { id: session.awaitingHoursInput.workerHoursId },
      });

      if (!workerHours) {
        userSessions.delete(telegramId);
        await safeSendMessage(ctx, "–ó–∞–ø–∏—Å—å —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return;
      }

      const feedback = new Feedback();
      feedback.userId = user.id;
      feedback.workerHoursId = workerHours.id;
      feedback.message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: ${hours}`;
      feedback.telegramUserId = telegramId;
      feedback.adminNotified = true;
      feedback.action = FeedbackAction.INCORRECT_TIME;

      await feedbackRepo.save(feedback);

      global.io.emit("newFeedback", {
        id: feedback.id,
        userName: user.name,
        userPosition: user.position,
        message: feedback.message,
        hours: workerHours.hours,
        requestedHours: hours,
        date: workerHours.date,
        action: FeedbackAction.INCORRECT_TIME,
        createdAt: feedback.createdAt,
      });

      userSessions.delete(telegramId);
      await safeSendMessage(
        ctx,
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ!"
      );
      await showMenus(ctx);
      return;
    }

    if (session?.awaitingFeedback) {
      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        userSessions.delete(telegramId);
        await safeSendMessage(
          ctx,
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      // Create feedback with user's message
      const feedback = new Feedback();
      feedback.userId = user.id;
      feedback.workerHoursId = 0; // General feedback, not tied to specific hours
      feedback.message = `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.name} (${ 
        ctx.from?.first_name || ""
      } ${ctx.from?.last_name || ""}): ${text}`;
      feedback.telegramUserId = telegramId;
      feedback.adminNotified = true;
      feedback.action =
        session.feedbackType === "hours_mistake"
          ? FeedbackAction.INCORRECT_TIME
          : FeedbackAction.LOGOUT;

      await feedbackRepo.save(feedback);

      // Notify admin via socket.io
      global.io.emit("newFeedback", {
        id: feedback.id,
        userName: user.name,
        userPosition: user.position,
        message: feedback.message,
        action: feedback.action,
        createdAt: feedback.createdAt,
      });

      // Clear session
      userSessions.delete(telegramId);

      await safeSendMessage(
        ctx,
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n" +
          "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
      );

      await showMenus(ctx);
      return;
    }

    // Handle menu button presses
    const user = await userRepo.findOne({ where: { telegramId } });

    async function sendHistoryButtons() {
      const now = new Date();
      const currentYear = now.getFullYear();
      const currentMonth = now.getMonth();

      const monthNames = [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
      ];

      const inlineKeyboard = [];

      // Generate buttons for the last 12 months
      for (let i = 0; i < 12; i++) {
        const targetDate = new Date(currentYear, currentMonth - i, 1);
        const targetMonth = targetDate.getMonth();
        const targetYear = targetDate.getFullYear();

        inlineKeyboard.push([
          {
            text: `${monthNames[targetMonth]} ${targetYear}`,
            callback_data: `month_${targetMonth}_${targetYear}`,
          },
        ]);
      }

      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:", {
        reply_markup: { inline_keyboard: inlineKeyboard },
      });
    }

    if (user) {
      if (text.includes("/last5days")) {
        await workerService.sendLast5DaysHours(user.id);
      }
      if (text.includes("/week")) {
        await workerService.sendWeekHours(user.id);
      }

      if (text.includes("/month")) {
        await workerService.sendMonthHours(user.id);
      }

      if (text.includes("/history")) {
        await sendHistoryButtons();
      }
    }

    if (!text || text.startsWith("/")) return;

    if (user) {
      switch (text) {
        case "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π":
          await workerService.sendLast5DaysHours(user.id);
          return;
        case "üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è":
          await workerService.sendWeekHours(user.id);
          return;
        case "üìÜ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
          await workerService.sendMonthHours(user.id);
          return;
        case "üóì –ò—Å—Ç–æ—Ä–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º":
          // Show month selection
          await sendHistoryButtons();
          return;
        case "üí¨ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
          await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:", {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚è∞ –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö",
                    callback_data: "feedback_hours_mistake",
                  },
                ],
                [
                  {
                    text: "üí¨ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ–±–ª–µ–º–∞",
                    callback_data: "feedback_general",
                  },
                ],
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "feedback_cancel" }],
              ],
            },
          });
          return;
      }
    }

    // If not a menu button, try enhanced user search
    const results = await enhancedUserSearch(userRepo, text);
    if (!results.length) {
      return safeSendMessage(
        ctx,
        '‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"\n‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "–ò–≤–∞–Ω"\n‚Ä¢ –ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: "–º–µ–Ω–µ–¥–∂–µ—Ä"'
      );
    }

    // Limit results to prevent telegram limits
    const limitedResults = results.slice(0, 10);

    const inlineKeyboard = limitedResults.map((item: any) => [
      {
        text: `üë§ ${item.name} | ${item.position || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"} | ID: ${
          item.id
        }`,
        callback_data: `select_${telegramId}_${item.id}`,
      },
    ]);

    if (results.length > 10) {
      inlineKeyboard.push([
        {
          text: `‚ûï –ù–∞–π–¥–µ–Ω–æ –µ—â–µ ${
            results.length - 10
          } —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å`,
          callback_data: `more_results_info`,
        },
      ]);
    }

    await safeSendMessage(
      ctx,
      `üîç –ù–∞–π–¥–µ–Ω–æ: ${results.length} ${
        results.length === 1
          ? "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
          : results.length < 5
          ? "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
      }\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:`,
      {
        reply_markup: { inline_keyboard: inlineKeyboard },
      }
    );
  });

  // Callback queries
  bot.on("callback_query", async (ctx) => {
    const data = (ctx.callbackQuery as any).data || "";
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    // Log all callback queries for debugging
    console.log(`üìû Callback received: "${data}" from user ${telegramId}`);

    if (data.startsWith("feedback_")) {
      const feedbackAction = data.split("_")[1];

      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      await safeAnswerCbQuery(ctx);

      switch (feedbackAction) {
        case "hours":
          await ctx.reply("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏:", {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤",
                    callback_data: "feedback_hours_mistake",
                  },
                ],
                [
                  {
                    text: "üìÖ –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞",
                    callback_data: "feedback_hours_mistake",
                  },
                ],
                [
                  {
                    text: "üìù –ù–µ–≤–µ—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
                    callback_data: "feedback_hours_mistake",
                  },
                ],
                [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "action_feedback" }],
              ],
            },
          });
          break;

        case "hours_mistake":
          userSessions.set(telegramId, {
            awaitingFeedback: true,
            feedbackType: "hours_mistake",
          });
          await ctx.reply(
            "‚è∞ **–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö**\n\n" +
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∞—à–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏:\n" +
              "‚Ä¢ –ö–∞–∫–∞—è –¥–∞—Ç–∞?\n" +
              "‚Ä¢ –ß—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ?\n" +
              "‚Ä¢ –ö–∞–∫–∏–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n\n" +
              "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
          );
          break;

        case "general":
          userSessions.set(telegramId, {
            awaitingFeedback: true,
            feedbackType: "general",
          });
          await ctx.reply(
            "üí¨ **–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞**\n\n" +
              "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n" +
              "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—è—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n" +
              "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
          );
          break;

        case "cancel":
          userSessions.delete(telegramId);
          await ctx.reply("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
          await showMenus(ctx);
          break;
      }
      return;
    }

    // Handle menu actions
    if (data.startsWith("action_")) {
      const action = data.split("_")[1];

      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      await safeAnswerCbQuery(ctx);

      console.log("action:", action);

      switch (action) {
        case "last5days":
          await workerService.sendLast5DaysHours(user.id);
          break;
        case "week":
          await workerService.sendWeekHours(user.id);
          break;
        case "month":
          await workerService.sendMonthHours(user.id);
          break;
        case "history":
          // Show month selection
          const now = new Date();
          const currentYear = now.getFullYear();
          const currentMonth = now.getMonth();

          const monthNames = [
            "–Ø–Ω–≤–∞—Ä—å",
            "–§–µ–≤—Ä–∞–ª—å",
            "–ú–∞—Ä—Ç",
            "–ê–ø—Ä–µ–ª—å",
            "–ú–∞–π",
            "–ò—é–Ω—å",
            "–ò—é–ª—å",
            "–ê–≤–≥—É—Å—Ç",
            "–°–µ–Ω—Ç—è–±—Ä—å",
            "–û–∫—Ç—è–±—Ä—å",
            "–ù–æ—è–±—Ä—å",
            "–î–µ–∫–∞–±—Ä—å",
          ];

          const inlineKeyboard = [];

          // Generate buttons for the last 12 months
          for (let i = 0; i < 12; i++) {
            const targetMonth = (currentMonth - i + 12) % 12;
            const targetYear =
              currentYear -
              Math.floor(i / 12) -
              (targetMonth > currentMonth ? 1 : 0);

            inlineKeyboard.push([
              {
                text: `${monthNames[targetMonth]} ${targetYear}`,
                callback_data: `month_${targetMonth}_${targetYear}`,
              },
            ]);
          }

          await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:", {
            reply_markup: { inline_keyboard: inlineKeyboard },
          });
          break;
        case "feedback":
          await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:", {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚è∞ –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö",
                    callback_data: "feedback_hours_mistake",
                  },
                ],
                [
                  {
                    text: "üí¨ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ–±–ª–µ–º–∞",
                    callback_data: "feedback_general",
                  },
                ],
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "feedback_cancel" }],
              ],
            },
          });
          break;
        default:
          await ctx.reply(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
          );
      }

      return;
    }

    // correct_<userId>_<epochMs>  OR  incorrect_<userId>_<epochMs>
    if (data.startsWith("correct") || data.startsWith("incorrect")) {
      const [action, , epochStr] = data.split("_");
      const targetMs = Number(epochStr);
      const targetDate = normalizeDate(
        isNaN(targetMs) ? new Date() : new Date(targetMs)
      );

      await safeAnswerCbQuery(
        ctx,
        action === "correct" ? "–í—ã –≤—ã–±—Ä–∞–ª–∏: –í–µ—Ä–Ω–æ ‚úÖ" : "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ù–µ–≤–µ—Ä–Ω–æ ‚ùå"
      );

      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      // Fetch that specific date's latest worker hours
      const workerHours = await workerHoursRepo.findOne({
        where: { userId: user.id, date: targetDate },
        order: { id: "DESC" },
      });

      if (!workerHours) {
        await ctx.reply("–ó–∞–ø–∏—Å—å —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return;
      }

      if (action === "incorrect") {
        userSessions.set(telegramId, {
          awaitingHoursInput: { workerHoursId: workerHours.id },
        });
        await safeSendMessage(
          ctx,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã:"
        );
      } else {
        await safeSendMessage(ctx, "–°–ø–∞—Å–∏–±–æ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.");
      }

      return;
    }

    // select_<telegramId>_<selectedUserId>
    if (data.startsWith("select_")) {
      try {
        console.log(
          `Processing select callback: ${data} from user: ${telegramId}`
        );
        const [, expectedUserId, selectedIdStr] = data.split("_");

        if (telegramId !== expectedUserId) {
          console.log(
            `User mismatch: expected ${expectedUserId}, got ${telegramId}`
          );
          await safeAnswerCbQuery(ctx, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.", {
            show_alert: true,
          });
          return;
        }

        const selectedId = Number(selectedIdStr);
        if (Number.isNaN(selectedId)) {
          console.log(`Invalid selected ID: ${selectedIdStr}`);
          await safeAnswerCbQuery(ctx, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.");
          return;
        }

        console.log(
          `Attempting to link user ID ${selectedId} to Telegram ${telegramId}`
        );

        // Check if this telegramId is already connected to another user
        const existingUser = await userRepo.findOne({ where: { telegramId } });
        if (existingUser && existingUser.id !== selectedId) {
          console.log(
            `User ${telegramId} already linked to ${existingUser.name} (ID: ${existingUser.id})`
          );
          await safeSendMessage(
            ctx,
            `–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${existingUser.name}. –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –æ—Ç–≤—è–∑–∫—É",
                      callback_data: `logout_request_${existingUser.id}`,
                    },
                  ],
                ],
              },
            }
          );
          return;
        }

        const user = await userRepo.findOne({ where: { id: selectedId } });
        if (!user) {
          console.log(`User not found with ID: ${selectedId}`);
          await safeAnswerCbQuery(ctx, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }

        // Check if the user is already linked to another Telegram account
        if (
          user.isLinked &&
          user.telegramId &&
          user.telegramId !== telegramId
        ) {
          console.log(
            `User ${user.name} (ID: ${user.id}) already linked to Telegram ${user.telegramId}`
          );
          await safeSendMessage(
            ctx,
            `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${user.name}** —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É.\n\nüí° –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤—è–∑–∞—Ç—å –µ–≥–æ, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
          );
          await safeAnswerCbQuery(ctx, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω");
          return;
        }

        // Link the user
        user.telegramId = telegramId;
        user.isLinked = true;
        await userRepo.save(user);
        console.log(
          `Successfully linked user ${user.name} (ID: ${user.id}) to Telegram ${telegramId}`
        );

        // Send success message
        await safeSendMessage(
          ctx,
          `‚úÖ **–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞!**\n\nüë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${
            user.name
          }\nüìä **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** ${user.position || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\nüÜî **ID:** ${
            user.id
          }\n\nüéâ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞!`
        );

        await safeAnswerCbQuery(ctx, "–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!");

        // Send current work hours
        try {
          await workerService.sendByUserId(user.id);
        } catch (error) {
          console.log("Error sending work hours:", error);
          await safeSendMessage(
            ctx,
            "‚ö†Ô∏è –ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          );
        }

        await showMenus(ctx);
        return;
      } catch (error) {
        console.error("Error in select callback handler:", error);
        await safeAnswerCbQuery(
          ctx,
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        );
        await safeSendMessage(
          ctx,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        );
        return;
      }
    }

    console.log("callback data:", data);

    // logout_request_<userId>
    if (data.startsWith("logout_request_")) {
      const [, , userIdStr] = data.split("_");
      const userId = Number(userIdStr);

      if (isNaN(userId)) {
        await safeAnswerCbQuery(ctx, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        return;
      }

      try {
        const user = await userRepo.findOne({ where: { id: userId } });
        if (!user) {
          await safeAnswerCbQuery(ctx, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }

        // Create a feedback with LOGOUT action
        const feedback = new Feedback();
        feedback.userId = userId;
        feedback.workerHoursId = 0; // Not related to worker hours
        feedback.message = `–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤—è–∑–∫—É Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name}. Telegram ID: ${telegramId}`;
        feedback.telegramUserId = telegramId;
        feedback.adminNotified = true;
        feedback.action = FeedbackAction.LOGOUT;

        await feedbackRepo.save(feedback);

        // Notify admin via socket.io
        global.io.emit("newFeedback", {
          id: feedback.id,
          userName: user.name,
          userPosition: user.position,
          message: feedback.message,
          action: FeedbackAction.LOGOUT,
          createdAt: feedback.createdAt,
        });

        await safeAnswerCbQuery(
          ctx,
          "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤—è–∑–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        );
        await ctx.reply(
          "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤—è–∑–∫—É Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
        );
        return;
      } catch (error) {
        console.error("Logout request error:", error);
        await safeAnswerCbQuery(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
        return;
      }
    }

    // Handle more results info button
    if (data === "more_results_info") {
      await safeAnswerCbQuery(
        ctx,
        "üí° –£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫, –≤–≤–µ–¥—è –±–æ–ª—å—à–µ –±—É–∫–≤ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è"
      );
      return;
    }

    // fallback for unknown callback data
    try {
      await ctx.answerCbQuery();
    } catch (error) {
      console.log("Callback query too old or invalid:", (error as any).message);
    }
  });

  // Command to show last 5 days hours
  bot.command("last5days", async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    console.log("last5days command:", telegramId);
    if (!telegramId) return;

    try {
      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      await workerService.sendLast5DaysHours(user.id);
    } catch (error) {
      console.error("Error in last5days command:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  });

  // Command to show current week hours
  bot.command("week", async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    try {
      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      await workerService.sendWeekHours(user.id);
    } catch (error) {
      console.error("Error in week command:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  });

  // Command to show current month hours
  bot.command("month", async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    try {
      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      await workerService.sendMonthHours(user.id);
    } catch (error) {
      console.error("Error in month command:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  });

  // Command to show month selection for historical data
  bot.command("history", async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    try {
      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      // Create buttons for the last 12 months
      const now = new Date();
      const currentYear = now.getFullYear();
      const currentMonth = now.getMonth();

      const monthNames = [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
      ];

      const inlineKeyboard = [];

      // Generate buttons for the last 12 months
      for (let i = 0; i < 12; i++) {
        const targetDate = new Date(currentYear, currentMonth - i, 1);
        const targetMonth = targetDate.getMonth();
        const targetYear = targetDate.getFullYear();

        inlineKeyboard.push([
          {
            text: `${monthNames[targetMonth]} ${targetYear}`,
            callback_data: `month_${targetMonth}_${targetYear}`,
          },
        ]);
      }

      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:", {
        reply_markup: { inline_keyboard: inlineKeyboard },
      });
    } catch (error) {
      console.error("Error in history command:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  });

  // Help command for search
  bot.command("search", async (ctx: Context) => {
    const helpText = `üîç **–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤**

üéØ **–ö–∞–∫ –∏—Å–∫–∞—Ç—å:**
‚Ä¢ **–ü–æ –∏–º–µ–Ω–∏:** \`–ò–≤–∞–Ω\`
‚Ä¢ **–ü–æ —Ñ–∞–º–∏–ª–∏–∏:** \`–ü–µ—Ç—Ä–æ–≤\`
‚Ä¢ **–ü–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏:** \`–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\` –∏–ª–∏ \`–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω\`
‚Ä¢ **–ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:** \`–º–µ–Ω–µ–¥–∂–µ—Ä\`, \`–¥–∏—Ä–µ–∫—Ç–æ—Ä\`
‚Ä¢ **–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:** \`–ò–≤\` –Ω–∞–π–¥–µ—Ç –ò–≤–∞–Ω–∞, –ò–≤–∞–Ω–æ–≤–∞

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –Ω–µ –≤–∞–∂–µ–Ω
‚Ä¢ –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

üìù **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**`;

    await safeSendMessage(ctx, helpText);
  });

  // Main menu command
  bot.command("menu", async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    try {
      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      await showMenus(ctx);
    } catch (error) {
      console.error("Error in menu command:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  });

  bot.command("feedback", async (ctx: Context) => {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) return;

    try {
      const user = await userRepo.findOne({ where: { telegramId } });
      if (!user) {
        await ctx.reply(
          "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start."
        );
        return;
      }

      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚è∞ –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö",
                callback_data: "feedback_hours_mistake",
              },
            ],
            [
              {
                text: "üí¨ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ–±–ª–µ–º–∞",
                callback_data: "feedback_general",
              },
            ],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "feedback_cancel" }],
          ],
        },
      });
    } catch (error) {
      console.error("Error in feedback command:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  });

  await bot.telegram.setMyCommands(
    [
      { command: "start", description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" },
      { command: "search", description: "–ü–æ–º–æ—â—å –ø–æ –ø–æ–∏—Å–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" },
      { command: "menu", description: "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" },
      { command: "last5days", description: "–ß–∞—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π" },
      { command: "week", description: "–ß–∞—Å—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é" },
      { command: "month", description: "–ß–∞—Å—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü" },
      { command: "history", description: "–ò—Å—Ç–æ—Ä–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º" },
      { command: "feedback", description: "–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ" },
    ],
    { scope: { type: "default" } }
  );

  try {
    await bot.launch();
    console.log("Telegram bot started successfully");

    // Graceful stop
    process.once("SIGINT", () => bot.stop("SIGINT"));
    process.once("SIGTERM", () => bot.stop("SIGTERM"));
  } catch (error) {
    console.error("Failed to start Telegram bot:", error);
    // Don't throw - let the HTTP server start anyway
  }
}
